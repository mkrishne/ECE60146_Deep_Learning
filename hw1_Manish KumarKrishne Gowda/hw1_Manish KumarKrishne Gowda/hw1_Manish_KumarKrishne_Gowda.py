# -*- coding: utf-8 -*-
"""HW1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K4fVIIY8Rs9bo1rb7frMdDjbee_6rGpB
"""

class Sequence(object):
  def __init__(self,array):
    self.array = array
    self.idx = -1 #start index for __next__
  def __call__(self):
    return self.array
  def __len__(self):
    return len(self.array)
  def __iter__(self): #Task 4 i.e. to use Sequence obj as iterator
    return(self)
  def __next__(self): #Task 4 i.e. to use Sequence obj as iterator
    self.idx += 1
    if self.idx == len(self.array):
      raise StopIteration
    else:
      return self.array[self.idx]
  def __eq__(self, other): #special method to compare two instances
      if len(self.array) == len(other.array):
        num_eq = 0
        for i in range(len(self.array)):
          if(self.array[i] == other.array[i]):
            num_eq += 1
        return num_eq #"num_eq" is count of elements that are identical at corresponding positions in two arrays.
      else:
        raise ValueError('Two arrays are not equal in length !')

class Arithmetic(Sequence): #Task 2 and 3 i.e. creating Arithmetic class extending Sequence
  def __init__(self,start,step):
    self.start = start
    self.step = step
    self.a_seq = []
  def __call__(self,length): #Task3 i.e. to make instances of Arithmetic class callable
    self.a_seq.clear() #clearing old seq to define a new sequence everytime the instance is called
    for i in range(length):
      self.a_seq.append(self.start + i*self.step) #AS = start + step*(n-1)  where n is the nth num in the seq
    super().__init__(self.a_seq)
    print(self.array)

class Geometric(Sequence): #Task 5 i.e. creating Geometric class extending Sequence
  def __init__(self,start,ratio):
    self.start = start
    self.ratio = ratio
    self.g_seq = []
  def __call__(self,length): #Task5 i.e. to make instances of Geometric class callable
    self.g_seq.clear()
    for i in range(length):
      self.g_seq.append(self.start * pow(self.ratio,i)) #GS = start*(ratio^(n-1)) where n is the nth num in the seq
    super().__init__(self.g_seq)
    print(self.array)

#Test Task 1
ex_inst = Sequence(array = list(range(1,4))) #range(start,stop,step) => array = [1,2,3]
print(ex_inst())

#Custom Task 1
my_inst = Sequence(array = list(range(2,10,2))) #range(start,stop,step) => array = [2,4,6,8]
print(my_inst())

#Test Task 2,3 & 4
AS = Arithmetic(start=1, step=2)
AS(length=5)
print(len(AS))
print([n for n in AS])

#Custom Task 2,3 & 4
AS = Arithmetic(start=2, step=3)
AS(length=4)
print(len(AS)) #4
print([n for n in AS])

#Test Task 5
GS = Geometric(start=1, ratio=2)
GS(length=8)
print(len(GS)) #8
print([n for n in GS])

#Custom Task 5
GS = Geometric(start=2, ratio=3)
GS(length=4)
print(len(GS))
print([n for n in GS])

#Test Task 6
AS = Arithmetic(start=1, step=2)
AS(length=5)
GS = Geometric(start=1, ratio=2)
GS(length=5)
print(AS == GS)
#change GS instance length to raise ValueError
GS(length=8)
print(AS == GS)

#Custom Task 6
AS = Arithmetic(start=0, step=3)
AS(length=10)
GS = Geometric(start=1, ratio=4)
GS(length=10)
print(AS == GS)
#change GS instance length to raise ValueError
GS(length=5)
print(AS == GS)